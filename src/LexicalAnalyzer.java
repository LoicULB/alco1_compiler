/* The following code was generated by JFlex 1.7.0 */

package src;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/LexicalAnalyzer.flex</tt>
 */
class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DECIMAL_SN = 2;
  public static final int C99_VAR = 4;
  public static final int REL_OPE = 6;
  public static final int CONDITION_STATEMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\7\1\7\1\7\1\7\23\0\1\34\6\0\1\21\1\22"+
    "\1\25\1\24\1\0\1\23\1\0\1\26\12\1\1\17\1\16\1\36"+
    "\1\20\1\35\2\0\2\2\1\3\13\2\1\4\13\2\6\0\1\44"+
    "\1\10\1\5\1\15\1\11\1\27\1\12\1\31\1\13\2\2\1\32"+
    "\1\41\1\14\1\6\1\43\1\2\1\40\1\33\1\30\2\2\1\37"+
    "\1\2\1\42\1\2\12\0\1\7\u1fa2\0\1\7\1\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\3\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\15\0\1\6\1\7\4\0\1\10\133\0\1\11\1\0"+
    "\1\11\16\0\3\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\112\0\271\0\112"+
    "\0\112\0\112\0\336\0\u0103\0\157\0\u0128\0\u014d\0\u0172"+
    "\0\u0197\0\u01bc\0\u01e1\0\u0206\0\u022b\0\u0250\0\u0275\0\u029a"+
    "\0\157\0\157\0\u02bf\0\u02e4\0\u0309\0\u032e\0\157\0\u0353"+
    "\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456\0\u047b"+
    "\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u0534\0\u0559\0\u057e\0\u05a3"+
    "\0\u05c8\0\u05ed\0\u0612\0\u0637\0\u065c\0\u0681\0\u06a6\0\u06cb"+
    "\0\u06f0\0\u0715\0\u073a\0\u075f\0\u0784\0\u07a9\0\u07ce\0\u07f3"+
    "\0\u0818\0\u083d\0\u0862\0\u0887\0\u08ac\0\u08d1\0\u08f6\0\u091b"+
    "\0\u0940\0\u0965\0\u098a\0\u09af\0\u09d4\0\u09f9\0\u0a1e\0\u0a43"+
    "\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21\0\u0b46\0\u0b6b"+
    "\0\u0b90\0\u0bb5\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u0c6e\0\u0c93"+
    "\0\u0cb8\0\u0cdd\0\u0d02\0\u0d27\0\u0d4c\0\u0d71\0\u0d96\0\u0dbb"+
    "\0\u0de0\0\u0e05\0\u0e2a\0\u0e4f\0\u0e74\0\u0e99\0\u0ebe\0\u0ee3"+
    "\0\u0f08\0\u0f2d\0\u0f52\0\u0f77\0\u0f9c\0\u0fc1\0\u0fe6\0\u100b"+
    "\0\u1030\0\u1055\0\u0534\0\u107a\0\u0612\0\u109f\0\u10c4\0\u10e9"+
    "\0\u110e\0\u1133\0\u1158\0\u117d\0\u11a2\0\u11c7\0\u11ec\0\u1211"+
    "\0\u1236\0\u125b\0\u1280\0\112\0\u0103\0\157";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\5\4\1\3\1\4\1\5\4\4\2\3\1\6"+
    "\6\3\1\4\1\7\3\4\1\10\1\11\1\12\1\13"+
    "\5\4\45\3\46\0\1\14\5\15\1\0\6\15\11\0"+
    "\5\15\3\0\6\15\1\0\1\14\5\15\1\0\4\15"+
    "\1\16\1\15\11\0\3\15\1\17\1\15\3\0\6\15"+
    "\1\0\1\14\5\15\1\0\6\15\11\0\2\15\1\20"+
    "\2\15\3\0\6\15\1\0\1\14\5\15\1\0\6\15"+
    "\11\0\2\15\1\21\2\15\3\0\6\15\1\0\1\14"+
    "\1\15\1\22\3\15\1\0\6\15\11\0\5\15\3\0"+
    "\6\15\1\0\1\14\5\15\1\0\5\15\1\23\11\0"+
    "\5\15\3\0\6\15\1\0\1\14\5\15\1\0\6\15"+
    "\11\0\4\15\1\24\3\0\6\15\1\0\1\14\5\15"+
    "\1\0\1\15\1\25\4\15\11\0\5\15\3\0\6\15"+
    "\1\0\1\14\5\15\1\0\3\15\1\26\2\15\11\0"+
    "\5\15\3\0\6\15\1\0\1\14\2\15\1\27\2\15"+
    "\1\0\6\15\11\0\5\15\3\0\6\15\1\0\1\14"+
    "\5\15\1\0\3\15\1\30\2\15\11\0\5\15\3\0"+
    "\6\15\1\0\1\14\5\15\1\0\1\15\1\31\4\15"+
    "\11\0\5\15\3\0\6\15\1\0\1\14\5\15\1\0"+
    "\4\15\1\32\1\15\11\0\5\15\3\0\6\15\1\0"+
    "\1\14\5\15\1\0\6\15\11\0\3\15\1\33\1\15"+
    "\3\0\6\15\1\34\1\35\1\27\1\36\3\27\1\34"+
    "\6\27\11\34\5\27\3\34\6\27\1\0\1\14\5\15"+
    "\1\0\6\15\11\0\1\37\4\15\3\0\6\15\1\0"+
    "\1\14\5\15\1\0\1\15\1\40\4\15\11\0\5\15"+
    "\3\0\6\15\3\34\1\41\42\34\1\35\1\27\1\42"+
    "\3\27\1\34\6\27\11\34\5\27\3\34\6\27\1\34"+
    "\1\35\1\27\1\36\1\43\2\27\1\34\6\27\11\34"+
    "\5\27\3\34\6\27\1\0\1\14\5\15\1\0\5\15"+
    "\1\44\11\0\5\15\3\0\6\15\3\34\1\41\1\45"+
    "\41\34\1\35\1\27\1\36\1\46\2\27\1\34\6\27"+
    "\11\34\5\27\3\34\6\27\1\0\1\14\3\15\1\47"+
    "\1\15\1\0\6\15\11\0\5\15\3\0\6\15\1\0"+
    "\1\14\4\15\1\50\1\0\6\15\11\0\5\15\3\0"+
    "\6\15\5\0\1\51\37\0\1\34\1\35\1\27\1\36"+
    "\1\27\1\52\1\27\1\34\6\27\11\34\5\27\3\34"+
    "\6\27\1\0\1\14\4\15\1\53\1\0\6\15\11\0"+
    "\5\15\3\0\6\15\1\0\1\14\5\15\1\0\1\15"+
    "\1\54\4\15\11\0\5\15\3\0\6\15\6\0\1\55"+
    "\36\0\1\34\1\35\1\27\1\36\2\27\1\56\1\34"+
    "\6\27\11\34\5\27\3\34\6\27\1\55\1\57\5\53"+
    "\1\0\1\60\5\53\11\55\5\53\3\55\6\53\1\0"+
    "\1\14\5\15\1\0\4\15\1\61\1\15\11\0\5\15"+
    "\3\0\6\15\7\55\1\0\1\62\34\55\1\63\1\64"+
    "\1\56\1\65\3\56\1\34\1\66\5\56\11\63\5\56"+
    "\3\63\6\56\1\55\1\57\1\53\1\67\3\53\1\0"+
    "\1\60\5\53\11\55\5\53\3\55\6\53\1\55\1\57"+
    "\5\53\1\0\1\60\1\70\4\53\11\55\5\53\3\55"+
    "\6\53\1\0\1\14\5\15\1\0\5\15\1\71\11\0"+
    "\5\15\3\0\6\15\7\55\1\0\1\62\1\72\33\55"+
    "\3\63\1\73\3\63\1\34\1\74\35\63\1\64\5\56"+
    "\1\34\1\66\5\56\11\63\5\56\3\63\6\56\1\63"+
    "\1\64\1\56\1\65\1\53\2\56\1\34\1\66\5\56"+
    "\11\63\5\56\3\63\6\56\1\63\1\64\1\56\1\65"+
    "\3\56\1\34\1\66\1\75\4\56\11\63\5\56\3\63"+
    "\6\56\1\55\1\57\2\53\1\56\2\53\1\0\1\60"+
    "\5\53\11\55\5\53\3\55\6\53\1\55\1\57\5\53"+
    "\1\0\1\60\1\53\1\76\3\53\11\55\5\53\3\55"+
    "\6\53\1\0\1\14\5\15\1\0\6\15\11\0\5\15"+
    "\3\0\1\77\5\15\7\55\1\0\1\62\1\55\1\100"+
    "\32\55\3\63\1\73\1\55\2\63\1\34\1\74\37\63"+
    "\1\73\3\63\1\34\1\74\1\101\34\63\1\64\1\56"+
    "\1\65\3\56\1\34\1\66\1\56\1\102\3\56\11\63"+
    "\5\56\3\63\6\56\1\55\1\57\5\53\1\0\1\60"+
    "\2\53\1\103\2\53\11\55\5\53\3\55\6\53\1\0"+
    "\1\14\5\15\1\0\6\15\11\0\2\15\1\104\2\15"+
    "\3\0\6\15\7\55\1\0\1\62\2\55\1\105\31\55"+
    "\3\63\1\73\3\63\1\34\1\74\1\63\1\106\33\63"+
    "\1\64\1\56\1\65\3\56\1\34\1\66\2\56\1\107"+
    "\2\56\11\63\5\56\3\63\6\56\1\55\1\57\5\53"+
    "\1\0\1\60\3\53\1\110\1\53\11\55\5\53\3\55"+
    "\6\53\1\0\1\14\5\15\1\0\3\15\1\111\2\15"+
    "\11\0\5\15\3\0\6\15\7\55\1\0\1\62\3\55"+
    "\1\112\30\55\3\63\1\73\3\63\1\34\1\74\2\63"+
    "\1\113\32\63\1\64\1\56\1\65\3\56\1\34\1\66"+
    "\3\56\1\114\1\56\11\63\5\56\3\63\6\56\1\55"+
    "\1\57\5\53\1\0\1\60\1\115\4\53\11\55\5\53"+
    "\3\55\6\53\1\0\1\14\5\15\1\0\6\15\11\0"+
    "\3\15\1\116\1\15\3\0\6\15\7\55\1\0\1\62"+
    "\1\117\33\55\3\63\1\73\3\63\1\34\1\74\3\63"+
    "\1\120\31\63\1\64\1\56\1\65\3\56\1\34\1\66"+
    "\1\121\4\56\11\63\5\56\3\63\6\56\1\55\1\57"+
    "\5\53\1\0\1\60\3\53\1\122\1\53\11\55\5\53"+
    "\3\55\6\53\1\0\1\14\5\15\1\0\1\15\1\123"+
    "\4\15\11\0\5\15\3\0\6\15\7\55\1\0\1\62"+
    "\3\55\1\124\30\55\3\63\1\73\3\63\1\34\1\74"+
    "\1\125\34\63\1\64\1\56\1\65\3\56\1\34\1\66"+
    "\3\56\1\126\1\56\11\63\5\56\3\63\6\56\1\55"+
    "\1\57\5\53\1\0\1\60\4\53\1\127\11\55\5\53"+
    "\3\55\6\53\1\0\1\14\5\15\1\0\6\15\11\0"+
    "\1\130\4\15\3\0\6\15\7\55\1\0\1\62\4\55"+
    "\1\131\27\55\3\63\1\73\3\63\1\34\1\74\3\63"+
    "\1\132\31\63\1\64\1\56\1\65\3\56\1\34\1\66"+
    "\4\56\1\133\11\63\5\56\3\63\6\56\1\55\1\57"+
    "\5\53\1\0\1\60\5\53\1\134\10\55\5\53\3\55"+
    "\6\53\1\0\1\14\4\15\1\135\1\0\6\15\11\0"+
    "\5\15\3\0\6\15\7\55\1\0\1\62\5\55\1\134"+
    "\26\55\3\63\1\73\3\63\1\34\1\74\4\63\1\136"+
    "\30\63\1\64\1\56\1\65\3\56\1\34\1\66\5\56"+
    "\1\137\10\63\5\56\3\63\6\56\7\55\1\0\1\62"+
    "\6\55\1\140\25\55\1\0\1\14\5\15\1\0\6\15"+
    "\11\0\5\15\3\0\1\15\1\141\4\15\3\63\1\73"+
    "\3\63\1\34\1\74\5\63\1\137\31\63\1\73\3\63"+
    "\1\34\1\74\6\63\1\142\25\63\7\55\1\0\1\62"+
    "\7\55\1\143\24\55\1\0\1\14\5\15\1\0\6\15"+
    "\11\0\1\144\4\15\3\0\6\15\3\63\1\73\3\63"+
    "\1\34\1\74\7\63\1\145\24\63\7\55\1\0\1\62"+
    "\10\55\1\146\23\55\1\0\1\14\5\15\1\0\6\15"+
    "\11\0\5\15\3\0\1\15\1\147\4\15\3\63\1\73"+
    "\3\63\1\34\1\74\10\63\1\150\23\63\7\55\1\0"+
    "\1\62\11\55\1\151\22\55\1\0\1\14\4\15\1\152"+
    "\1\0\6\15\11\0\5\15\3\0\6\15\3\63\1\73"+
    "\3\63\1\34\1\74\11\63\1\153\22\63\7\55\1\0"+
    "\1\62\12\55\1\154\21\55\1\0\1\14\5\15\1\0"+
    "\6\15\11\0\5\15\3\0\2\15\1\155\3\15\3\63"+
    "\1\73\3\63\1\34\1\74\12\63\1\156\21\63\7\55"+
    "\1\0\1\62\13\55\1\157\20\55\1\0\1\14\5\15"+
    "\1\0\1\160\5\15\11\0\5\15\3\0\6\15\3\63"+
    "\1\73\3\63\1\34\1\74\13\63\1\161\20\63\7\55"+
    "\1\0\1\62\14\55\1\162\17\55\1\0\1\14\5\15"+
    "\1\0\6\15\11\0\5\15\3\0\3\15\1\163\2\15"+
    "\3\63\1\73\3\63\1\34\1\74\14\63\1\164\17\63"+
    "\7\55\1\0\1\62\15\55\1\165\16\55\1\0\1\14"+
    "\5\15\1\0\6\15\11\0\1\15\1\166\3\15\3\0"+
    "\6\15\3\63\1\73\3\63\1\34\1\74\15\63\1\167"+
    "\16\63\7\55\1\0\1\62\2\55\1\170\31\55\1\0"+
    "\1\14\4\15\1\171\1\0\6\15\11\0\5\15\3\0"+
    "\6\15\3\63\1\73\3\63\1\34\1\74\2\63\1\172"+
    "\31\63\7\55\1\0\1\62\16\55\1\173\15\55\1\0"+
    "\1\14\5\15\1\0\1\15\1\174\4\15\11\0\5\15"+
    "\3\0\6\15\3\63\1\73\3\63\1\34\1\74\16\63"+
    "\1\175\15\63\1\0\1\14\5\15\1\0\4\15\1\176"+
    "\1\15\11\0\5\15\3\0\6\15\1\0\1\14\5\15"+
    "\1\0\5\15\1\177\11\0\5\15\3\0\6\15\1\0"+
    "\1\14\5\15\1\0\6\15\11\0\1\200\4\15\3\0"+
    "\6\15\1\0\1\14\4\15\1\201\1\0\6\15\11\0"+
    "\5\15\3\0\6\15\1\0\1\14\5\15\1\0\6\15"+
    "\11\0\5\15\3\0\1\15\1\202\4\15\1\0\1\14"+
    "\5\15\1\0\6\15\11\0\5\15\3\0\4\15\1\203"+
    "\1\15\1\0\1\14\5\15\1\0\6\15\11\0\5\15"+
    "\3\0\1\15\1\204\4\15\1\0\1\14\5\15\1\0"+
    "\3\15\1\205\2\15\11\0\5\15\3\0\6\15\1\0"+
    "\1\14\5\15\1\0\4\15\1\206\1\15\11\0\5\15"+
    "\3\0\6\15\1\0\1\14\5\15\1\0\6\15\11\0"+
    "\1\15\1\207\3\15\3\0\6\15\1\0\1\14\5\15"+
    "\1\0\6\15\11\0\5\15\3\0\1\15\1\210\4\15"+
    "\1\0\1\14\5\15\1\0\1\15\1\211\4\15\11\0"+
    "\5\15\3\0\6\15\1\0\1\14\5\15\1\0\6\15"+
    "\11\0\5\15\3\0\5\15\1\212\1\0\1\14\5\15"+
    "\1\0\5\15\1\213\11\0\5\15\3\0\6\15\1\214"+
    "\1\215\5\216\1\0\6\216\11\214\5\216\3\214\6\216";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4773];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\1\1\3\11\1\1\15\0"+
    "\2\1\4\0\1\1\133\0\1\1\1\0\1\1\16\0"+
    "\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(LexicalUnit.END_OF_STREAM, yyline, yycolumn);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            } 
            // fall through
          case 11: break;
          case 2: 
            { System.out.println("EQUAL: "+ yytext()); return new Symbol(LexicalUnit.EQUAL, yyline, yycolumn);
            } 
            // fall through
          case 12: break;
          case 3: 
            { System.out.println("NOT: " + yytext());return new Symbol(LexicalUnit.NOT, yyline, yycolumn);
            } 
            // fall through
          case 13: break;
          case 4: 
            { System.out.println("GREATER: "+ yytext()); return new Symbol(LexicalUnit.GREATER, yyline, yycolumn);
            } 
            // fall through
          case 14: break;
          case 5: 
            { System.out.println("SMALLER: "+ yytext()); return new Symbol(LexicalUnit.SMALLER, yyline, yycolumn);
            } 
            // fall through
          case 15: break;
          case 6: 
            { System.out.println("ELSE: "+ yytext()); return new Symbol(LexicalUnit.ELSE, yyline, yycolumn);
            } 
            // fall through
          case 16: break;
          case 7: 
            { System.out.println("THEN: "+ yytext()); return new Symbol(LexicalUnit.THEN, yyline, yycolumn);
            } 
            // fall through
          case 17: break;
          case 8: 
            { System.out.println("ENDIF: "+ yytext()); return new Symbol(LexicalUnit.ENDIF, yyline, yycolumn);
            } 
            // fall through
          case 18: break;
          case 9: 
            { System.out.println("IF: "+ yytext()); return new Symbol(LexicalUnit.IF, yyline, yycolumn);
            } 
            // fall through
          case 19: break;
          case 10: 
            { 
            } 
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexicalAnalyzer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexicalAnalyzer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexicalAnalyzer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
